% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UnBoundNonLinDecompOp_by_PoolNames.R
\name{getCompartmentalMatrixFunc,UnBoundNonLinDecompOp_by_PoolNames,character,character-method}
\alias{getCompartmentalMatrixFunc,UnBoundNonLinDecompOp_by_PoolNames,character,character-method}
\title{Compartmental Matrix as function of the state vector and time}
\usage{
\S4method{getCompartmentalMatrixFunc}{UnBoundNonLinDecompOp_by_PoolNames,character,character}(object, timeSymbol, state_variable_names)
}
\arguments{
\item{object}{object of class:\code{UnBoundNonLinDecompOp_by_PoolNames}, An object of the class \code{UnBoundNonLinDecompOp_by_PoolNames} which is a representation equivalent to the compartmental matrix
but independent of the order of state variables (pools) which therefore 
can be translated to any such ordering.}

\item{timeSymbol}{object of class:\code{character}, The name of the argument representing time in the functions defining the fluxes in \code{object}}

\item{state_variable_names}{object of class:\code{character}, The vector of the names of the state variables.
The argument object is a representation of the compartmental system as #' lists of fluxes (internal fluxes and out-fluxes) as functions of the state variables and time. This method translates it to a matrix based formulation specific to a given ordering of the state variables.
It is assumed (and checked) that the names formal arguments of the flux functions in \code{object} are a subset of the names of \code{state_variable_names} 
The method is used internally to translate the more intuitive (and more general) flux based description to the matrix based description required by the ode solvers.}
}
\description{
Compartmental Matrix as function of the state vector and time
}
